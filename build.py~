#!/usr/bin/env python3

"""
Pandoc Note Builder

Converts .md files in the current directory to HTML and PDF files.

"""

import subprocess
import re
import os
from string import Template 

HTML_TEMPLATE_FILEPATH = "templates/htmlplate.html"
HTML_TEMPLATE = None


def init():
   global HTML_TEMPLATE
   with open(HTML_TEMPLATE_FILEPATH) as f:
   	HTML_TEMPLATE = Template(f.read())
    
    
def main():
    makeDirectories()
    for mdFile in getMarkdownFiles():
        filename = stripFilenameExtention(mdFile)
        makeHTML(filename)
        makePDF(filename)


def makeDirectories():
    dirs = ['html', 'pdf']
    for d in dirs:
        if not os.path.exists(d):
            os.mkdir(d)

            
def stripFilenameExtention(filename):
    return os.path.splitext(filename)[0]


def getMarkdownFiles():
    mdFiles = []
    for filename in os.listdir():
        if filename.endswith('.md'):
            mdFiles.append(filename)
    return mdFiles


def makeHTML(filename):
    output = 'html/' + filename + '.html'
    print("building", output, '...')
    args = [
        'pandoc',
        filename + '.md',
        '-t',
        'html5',
        '''--mathjax=http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_SVG''',
    ]
    print("$ " + " ".join(args))
    prog = subprocess.run(args, stdout=subprocess.PIPE)
    body = prog.stdout.decode('utf-8')
    fullHTML = HTML_TEMPLATE.substitute({
    	'BODY': body,
    })
    print(body)
    print(fullHTML)
    with open(output, 'w') as f:
    	print(f)
    	f.write(fullHTML)
    fullHTML
    
    
    

def makePDF(filename):
    output = 'pdf/' + filename + '.pdf'
    print("building", output, '...')
    args = [
        'pandoc',
        filename + '.md',
        '-o',
        output
    ]
    subprocess.call(args)
    

init()
if __name__ == '__main__': main()
    
    
